# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
# The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?


def get_triangle(num):

    """Returns the value of the nth triangle number"""

    tri = (num * (num + 1)) / 2
    return tri


def count_factors(num):

    """Returns the number of factors of a given triangle number."""
# TODO: OPTIMIZE THIS FUNCTION.  IT CHECKS TOO MANY VALUES.
    factors = 2
    halfnum = (num / 2) + 1
    if num % 2 == 0:
        for i in range(2, halfnum):
            if num % i == 0:
                factors += 1
        return factors
    else:
        for i in range(3, halfnum, 2):
            if num % i == 0:
                factors += 1
        return factors

def check_range(low, high):
    for x in range(low, high):
        xfactors = count_factors(get_triangle(x))
        print x, xfactors
        if xfactors > 500:
            print "Number: ", x
            print "Triangle Number: ", get_triangle(x)
            print "Factors: ", xfactors

xfactors = count_factors(get_triangle(10000))
print xfactors