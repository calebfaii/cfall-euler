# Find the maximum total from top to bottom of the triangle below:

from itertools import product


row01 = [75]
row02 = [95, 64]
row03 = [17, 47, 82]
row04 = [18, 35, 87, 10]
row05 = [20, 4, 82, 47, 65]
row06 = [19, 01, 23, 75, 03, 34]
row07 = [88, 02, 77, 73, 07, 63, 67]
row08 = [99, 65, 4, 28, 6, 16, 70, 92]
row09 = [41, 41, 26, 56, 83, 40, 80, 70, 33]
row10 = [41, 48, 72, 33, 47, 32, 37, 16, 94, 29]
row11 = [53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14]
row12 = [70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57]
row13 = [91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48]
row14 = [63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31]
row15 = [04, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23]

matrix = [row01, row02, row03, row04, row05,
          row06, row07, row08, row09, row10,
          row11, row12, row13, row14, row15]


def permutations_with_replacement(n):

    return product([0, 1], repeat=n)


def run_instructions():

    outcomes = []
    for path in permutations_with_replacement(14):
        path_list = []
        row = 1
        index = 0
        path_list.append(matrix[0][0])
        for step in path:
            index += step
            value = matrix[row][index]
            path_list.append(value)
            row += 1
        outcomes.append(path_list)
    print "Number of Paths: ", len(outcomes)
    return outcomes


def solve():

    sums = run_instructions()
    finals = []
    for i in sums:
        total = sum(i)
        finals.append(total)
    winner = max(finals)
    path = finals.index(winner)
    print "Solution: ", winner
    print "Path: ", sums[path]


solve()
# SOLVED!
